<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Obtener la posición actual de la vista
var viewPosX = view_xview[0];
var viewPosY = view_yview[0];

// Calcular la posición central de la pantalla
var centerX = view_xview[0] + view_wview[0] / 2;
var centerY = view_yview[0] + view_hview[0] / 2;

// Obtener la altura del objeto "Game Won"
var gameWonHeight = sprite_get_height(object_gamewon);

// Calcular la posición vertical del objeto "Next Level"
var levelUpY = centerY + gameWonHeight / 2;

// Establecer la velocidad de desplazamiento
var viewSpeed = 10;

// Establecer variable para ver si quedan enemigos para pasar al siguiente nivel
var numeroEnemigos = instance_number(object_enemy01) + instance_number(object_enemy02) + instance_number(object_enemy03);

// Verificar si el juego está en modo "game over"
if (!global.gameover) {
    // Mover la vista hacia la derecha
    viewPosX += viewSpeed;

    // Verificar si la vista ha alcanzado el límite derecho de la habitación
    if (viewPosX + view_wview[0] &gt;= room_width) {
        // Detener la vista en el límite derecho
        viewPosX = room_width - view_wview[0];

        if (numeroEnemigos == 0) {
            var nextRoom = room + 1; // Obtener el índice del siguiente room
            if (room_exists(nextRoom)) {
                instance_create(centerX, centerY, object_gamewon);
                instance_create(centerX, levelUpY, object_nextLevel);
                if (keyboard_check_pressed(vk_enter)) {
                    room_goto_next();
                }
            }
            else {
                instance_create(centerX, centerY, object_gamewon);
                if (keyboard_check_pressed(vk_enter)) {
                    room_goto(0);
                }
                
            }
        }
    }
}

// Actualizar la posición de la vista
view_xview[0] = viewPosX;
view_yview[0] = viewPosY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.background_music != -1) {
    audio_stop_sound(global.background_music);
    global.background_music = -1; // Restablece la variable a su valor por defecto
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var currentRoom = room;
var currentRoomName = room_get_name(currentRoom);
global.victory = false;
global.gameover = false;
global.background_music = -1;

// Evento Step del objeto
switch (currentRoomName) {
    case "room_level01":
        global.background_music = audio_play_sound(sound_backgroundLoop01, 1, true);
        break;
    case "room_level02":
        global.background_music = audio_play_sound(sound_backgroundLoop02, 1, true);
        break;
    case "room_level03":
        global.background_music = audio_play_sound(sound_backgroundLoop03, 1, true);
        break;
    // Agrega más casos según los sonidos de fondo que desees reproducir
    default:
        // Caso por defecto en caso de que el valor de backgroundSoundIndex no coincida con ningún caso anterior
        global.background_music = audio_play_sound(sound_backgroundLoop01, 1, true);
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(true);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_escape)
{
    game_end();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
